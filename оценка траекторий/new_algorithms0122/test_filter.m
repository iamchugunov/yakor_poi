N = 5;

poits = traj(N).poits;

k = 1;
k1 = 0;
X = [];
discr = [];
X4 = [];
X0 = [];
while k < length(poits)
    if poits(k).count == 4
%         [X0, flag, dop, nev, hei_geo] = NavSolverRDinv_h(poits(k).rd, config.posts, [0;0], -15000:1000:15000, config);
        [X0, flag] = NavSolverRDinvh(poits(k).rd, config.posts, [0;0;0]);
        
        if flag
            k1 = k1 + 1;
            X4(:,k1) = X0;
%             break
        end
    end 
    k = k + 1;
end
X0 = X4(:,1);
t_ = [];
rd_ = [];
for i = 1:200
    t_(i) = poits(i).Frame;
    rd_(:,i) = poits(i).rd;
end

for i = 1:6
        nums = find(rd_(i,:));
        rd_cur = rd_(i,nums);
        t_cur = t_(nums);
        
        [RD, koef, order] = approx_rd(t_cur - t_(1),rd_cur, 2);
        t1 = 0:1:(t_(end)-t_(1));
        for k = 1:length(t1)
            RD_(k,1) = 0;
            for j = 1:length(koef)
                RD_(k,1) = RD_(k,1) + koef(j) * t1(k)^(j - 1);
            end
        end
        rd__(i,:) = RD_';
        t__ = t1 + t_(1);
end

for i = 1:size(t__,2)
    [x4(:,i), flag, nev(:,i)] = NavSolverRDinvh(rd__(:,i), config.posts, [0;0;10000], -15000:1000:15000);
end
            


X(:,1) = [X0(1); 0; 0; X0(2); 0; 0; -10000; 0; 0];
% X(:,1) = [x4(1); (x4(1,end)-x4(1,1))/(t__(end)-t__(1)); 0; x4(2); (x4(2,end)-x4(2,1))/(t__(end)-t__(1)); 0; x4(3); 0; 0];
% % X(:,1) = track.SV(:,1);
Dx = eye(9);
% Dx = [98148571.4259292,2272005.41964360,27012.2001011383,2099823.83615597,29635.7384075383,-30.4214677574466,-11308344.3132796,-246760.033645693,-2662.93135931996;2272005.41964360,77616.5740181586,1227.52572398190,44252.0669500610,1030.38685466071,2.08680038393611,-257245.096293136,-8355.19106583959,-118.149218773879;27012.2001011383,1227.52572398190,28.9704240988910,409.464154406302,8.43040230808812,-0.161505947336555,-2930.18252159979,-120.775597641225,-2.12036132511908;2099823.83615597,44252.0669500610,409.464154406303,1894373.69765978,85400.7739050635,1988.96767144525,-2039144.00727299,-85535.8891259710,-1827.27985908090;29635.7384075377,1030.38685466069,8.43040230808819,85400.7739050636,5914.10864007365,191.411296023645,-84117.8564585339,-5430.13456717365,-148.148694987705;-30.4214677574613,2.08680038393487,-0.161505947336555,1988.96767144526,191.411296023645,10.3793146070911,-1785.21245256945,-147.602234765120,-4.91709048019092;-11308344.3132796,-257245.096293136,-2930.18252159979,-2039144.00727299,-84117.8564585339,-1785.21245256945,3092684.71230958,110073.903129780,2218.86468874235;-246760.033645693,-8355.19106583957,-120.775597641224,-85535.8891259710,-5430.13456717364,-147.602234765120,110073.903129780,6626.19169691190,198.418718884473;-2662.93135931998,-118.149218773880,-2.12036132511908,-1827.27985908089,-148.148694987704,-4.91709048019091,2218.86468874234,198.418718884472,10.4011273660559];
D_ksi = eye(3)*0.5^2;
nums = find([poits.count]  > 2);
poits1 = poits(nums);
for i = 2:length(poits1)
    dt = poits1(i).Frame - poits1(i-1).Frame;
    [X(:,i), Dx, discr1] = Kalman_step_3Drd(poits1(i).rd, X(:,i-1), Dx, dt, 10^2, D_ksi, config);
    discr(i) = norm(discr1);
end